{"remainingRequest":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\src\\components\\Visualization\\SunburstChart.vue?vue&type=style&index=0&id=11957ac2&scoped=true&lang=css","dependencies":[{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\src\\components\\Visualization\\SunburstChart.vue","mtime":1638745041531},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1632349277000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpjaGFydC1pbmZvIHsNCiAgZm9udC1zaXplOiAxNHB4Ow0KICBjb2xvcjogIzAwMDBmZjsNCiAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgbWFyZ2luLWxlZnQ6IDMwJTsNCn0NCi5yaWdodEMgew0KICBtYXJnaW4tbGVmdDogNDIlOw0KICBtYXJnaW4tdG9wOiAtMTclOw0KfQ0KI3N2Z0N1cnZlMiB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgYm9yZGVyOiAycHggZGFzaGVkIHB1cnBsZTsNCiAgd2lkdGg6IDMwMHB4Ow0KICBoZWlnaHQ6IDEyMHB4Ow0KICBsZWZ0OiAxMSU7DQp9DQo="},{"version":3,"sources":["D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo1\\client\\src\\components\\Visualization\\SunburstChart.vue"],"names":[],"mappings":";AAqMA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAClB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACX","file":"D:/MyResearch/WakitaLab/ProjectTDB/Code/Demo/TDBDemo1/client/src/components/Visualization/SunburstChart.vue","sourceRoot":"","sourcesContent":["<script>\r\nimport axios from \"axios\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar f1aData = \"default\";\r\n\r\nexport default {\r\n  name: \"SubburstChart\",\r\n  data() {\r\n    var data = null;\r\n    return {\r\n      data,\r\n    };\r\n  },\r\n  components: {},\r\n  methods: {\r\n    draw( data_,svg_) {\r\n\r\n      this.hierarchy(data_);\r\n\r\n            let arr = Object.assign({}, Object.assign({}, this.data).children);\r\n      let dom = new Array();\r\n      for (let i = 0; i < Object.keys(arr).length; i++) dom[i] = arr[i].name;\r\n      console.log(dom);\r\n\r\n      let color = d3\r\n        .scaleOrdinal()\r\n        .domain(dom)\r\n        .range([\r\n          \"rgb(215, 25, 28)\",\r\n          \"rgb(255, 255, 191)\",\r\n          \"rgb(253, 174, 97)\",\r\n          \"rgb(171, 221, 164)\",\r\n          \"rgb(43, 131, 186)\",\r\n          \"rgb(215, 25, 28)\",\r\n          \"rgb(253, 174, 97)\",\r\n          \"rgb(255, 255, 191)\",\r\n          \"rgb(171, 221, 164)\",\r\n          \"rgb(43, 131, 186)\",\r\n        ]);\r\n\r\n      let width = 250;\r\n\r\n      let radius = width / 2;\r\n\r\n      let arc = d3\r\n        .arc()\r\n        .startAngle((d) => d.x0)\r\n        .endAngle((d) => d.x1)\r\n        .padAngle(1 / radius)\r\n        .padRadius(radius)\r\n        .innerRadius((d) => Math.sqrt(d.y0))\r\n        .outerRadius((d) => Math.sqrt(d.y1) );\r\n\r\n      let mousearc = d3\r\n        .arc()\r\n        .startAngle((d) => d.x0)\r\n        .endAngle((d) => d.x1)\r\n        .innerRadius((d) => Math.sqrt(d.y0))\r\n        .outerRadius(radius);\r\n\r\n      function partition(data) {\r\n        return d3.partition().size([2 * Math.PI, radius * radius])(\r\n          d3\r\n            .hierarchy(data)\r\n            .sum((d) => d.value)\r\n            .sort((a, b) => b.value - a.value)\r\n        );\r\n      }\r\n\r\n      const root = partition(this.data);\r\n      // console.log(root);\r\n\r\n      const svg = d3.select(svg_);\r\n\r\n      const element = svg.node();\r\n      element.value = { sequence: [], percentage: 0.0 };\r\n\r\n      const label = svg\r\n        .append(\"text\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"fill\", \"#888\")\r\n        .style(\"visibility\", \"hidden\");\r\n\r\n      label\r\n        .append(\"tspan\")\r\n        .attr(\"class\", \"percentage\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", 0)\r\n        .attr(\"dy\", \"-0.1em\")\r\n        .attr(\"font-size\", \"3em\")\r\n        .text(\"\");\r\n\r\n      label\r\n        .append(\"tspan\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", 0)\r\n        .attr(\"dy\", \"1.5em\")\r\n        .text(\"of visits begin with this sequence\");\r\n\r\n      svg\r\n        .attr(\"viewBox\", `${-radius} ${-radius} ${width} ${width}`)\r\n        .style(\"max-width\", `${width / 1.5}px`)\r\n        .style(\"font\", \"12px sans-serif\");\r\n\r\n      const map = new Map();\r\n\r\n      const path = svg\r\n        .append(\"g\")\r\n        .selectAll(\"path\")\r\n        .data(\r\n          root.descendants().filter((d) => {\r\n            return d.depth && d.x1 - d.x0 > 0.001;\r\n          })\r\n        )\r\n        .join(\"path\")\r\n        .attr(\"fill\", (d) => color(d.data.name))\r\n        .attr(\"d\", arc);\r\n\r\n      svg\r\n        .append(\"g\")\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"pointer-events\", \"all\")\r\n        .on(\"mouseleave\", () => {\r\n          path.attr(\"fill-opacity\", 1);\r\n          label.style(\"visibility\", \"hidden\");\r\n          // Update the value of this view\r\n          element.value = { sequence: [], percentage: 0.0 };\r\n          element.dispatchEvent(new CustomEvent(\"input\"));\r\n        })\r\n        .selectAll(\"path\")\r\n        .data(\r\n          root.descendants().filter((d) => {\r\n            // Don't draw the root node, and for efficiency, filter out nodes that would be too small to see\r\n            return d.depth && d.x1 - d.x0 > 0.001;\r\n          })\r\n        )\r\n        .join(\"path\")\r\n        .attr(\"d\", mousearc);\r\n    },\r\n    hierarchy(arr) {\r\n      function buildHierarchy(csv) {\r\n        // Helper function that transforms the given CSV into a hierarchical format.\r\n        const root = { name: \"root\", children: [] };\r\n        for (let i = 0; i < csv.length; i++) {\r\n          const sequence = csv[i][0];\r\n          const size = +csv[i][1];\r\n          if (isNaN(size)) {\r\n            // e.g. if this is a header row\r\n            continue;\r\n          }\r\n          const parts = sequence.split(\"-\");\r\n          let currentNode = root;\r\n          for (let j = 0; j < parts.length; j++) {\r\n            const children = currentNode[\"children\"];\r\n            const nodeName = parts[j];\r\n            let childNode = null;\r\n            if (j + 1 < parts.length) {\r\n              // Not yet at the end of the sequence; move down the tree.\r\n              let foundChild = false;\r\n              for (let k = 0; k < children.length; k++) {\r\n                if (children[k][\"name\"] == nodeName) {\r\n                  childNode = children[k];\r\n                  foundChild = true;\r\n                  break;\r\n                }\r\n              }\r\n              // If we don't already have a child node for this branch, create it.\r\n              if (!foundChild) {\r\n                childNode = { name: nodeName, children: [] };\r\n                children.push(childNode);\r\n              }\r\n              currentNode = childNode;\r\n            } else {\r\n              // Reached the end of the sequence; create a leaf node.\r\n              childNode = { name: nodeName, value: size };\r\n              children.push(childNode);\r\n            }\r\n          }\r\n        }\r\n        return root;\r\n      }\r\n      let testroot = buildHierarchy(arr);\r\n      console.log(\"testroot\");\r\n      console.log(testroot);\r\n\r\n      this.data = testroot;\r\n      console.log(this.data);\r\n\r\n      // this.draw();\r\n    },\r\n  },\r\n  mounted() {},\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nchart-info {\r\n  font-size: 14px;\r\n  color: #0000ff;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  margin-left: 30%;\r\n}\r\n.rightC {\r\n  margin-left: 42%;\r\n  margin-top: -17%;\r\n}\r\n#svgCurve2 {\r\n  position: absolute;\r\n  border: 2px dashed purple;\r\n  width: 300px;\r\n  height: 120px;\r\n  left: 11%;\r\n}\r\n</style>"]}]}