{"remainingRequest":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\babel-loader\\lib\\index.js!D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\Sec3\\Sec3Chart0.vue?vue&type=template&id=5f552081&scoped=true","dependencies":[{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\Sec3\\Sec3Chart0.vue","mtime":1635991292975},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1632349277000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jaywgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aFNjb3BlSWQgPSBmdW5jdGlvbiBfd2l0aFNjb3BlSWQobikgewogIHJldHVybiBfcHVzaFNjb3BlSWQoImRhdGEtdi01ZjU1MjA4MSIpLCBuID0gbigpLCBfcG9wU2NvcGVJZCgpLCBuOwp9OwoKdmFyIF9ob2lzdGVkXzEgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKGZ1bmN0aW9uICgpIHsKICByZXR1cm4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIHsKICAgIGlkOiAiU2VjMy1DaGFydDAiLAogICAgY2xhc3M6ICJyaWdodEMiCiAgfSwgWy8qI19fUFVSRV9fKi9fY3JlYXRlRWxlbWVudFZOb2RlKCJzdmciLCB7CiAgICBpZDogInN2ZzQiCiAgfSldLCAtMQogIC8qIEhPSVNURUQgKi8KICApOwp9KTsKCnZhciBfaG9pc3RlZF8yID0gLyojX19QVVJFX18qL19jcmVhdGVUZXh0Vk5vZGUoIkYzQSBYWFhYWCIpOwoKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9jaGFydF9pbmZvID0gX3Jlc29sdmVDb21wb25lbnQoImNoYXJ0LWluZm8iKTsKCiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIFtfaG9pc3RlZF8xLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9jaGFydF9pbmZvLCBudWxsLCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBbX2hvaXN0ZWRfMl07CiAgICB9KSwKICAgIF86IDEKICAgIC8qIFNUQUJMRSAqLwoKICB9KSwgX2NyZWF0ZUNvbW1lbnRWTm9kZSgiIFx0PFNlYzJUZXh0PndoYXQ8L1NlYzJUZXh0PlxyXG5cdDxTZWMxVGV4dD48L1NlYzFUZXh0PiAiKV0sIDY0CiAgLyogU1RBQkxFX0ZSQUdNRU5UICovCiAgKTsKfQ=="},{"version":3,"sources":["D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.3\\2021-11-03_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\Sec3\\Sec3Chart0.vue"],"names":[],"mappings":";;;;;;;sBACE,mBAAA,CAEM,KAFN,EAEM;AAFD,IAAA,EAAE,EAAC,aAEF;AAFgB,IAAA,KAAK,EAAC;AAEtB,GAFN,E,cACE,mBAAA,CAAqB,KAArB,EAAqB;AAAhB,IAAA,EAAE,EAAC;AAAa,GAArB,C,CADF,E;;AAAA,G;;;+CAGY,W;;;;;6DAHZ,U,EAGA,YAAA,CAAkC,qBAAlC,EAAkC,IAAlC,EAAkC;sBAAtB;AAAA,aAAS,C,UAAA,CAAT;AAAA,K,CAAsB;;;;AAAA,GAAlC,C,EAEA,mBAAA,CAAA,0DAAA,C","sourcesContent":["<template>\r\n  <div id=\"Sec3-Chart0\" class=\"rightC\">\r\n    <svg id=\"svg4\"></svg>\r\n  </div>\r\n  <chart-info>F3A XXXXX</chart-info>\r\n\r\n  <!-- \t<Sec2Text>what</Sec2Text>\r\n\t<Sec1Text></Sec1Text> -->\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar f1aData = \"default\";\r\n\r\nexport default {\r\n  name: \"Sec3Chart0\",\r\n  data() {\r\n    var data = null;\r\n\r\n    let thisdata;\r\n\r\n    function readTextFile(file) {\r\n      var rawFile = new XMLHttpRequest();\r\n      rawFile.open(\"GET\", file, false);\r\n      rawFile.onreadystatechange = function () {\r\n        if (rawFile.readyState === 4) {\r\n          if (rawFile.status === 200 || rawFile.status == 0) {\r\n            thisdata = rawFile.responseText;\r\n            // alert(allText);\r\n          }\r\n        }\r\n      };\r\n      rawFile.send(null);\r\n    }\r\n\r\n    readTextFile(\"F3A_Data.csv\");\r\n\r\n    var csv = d3.csvParseRows(thisdata);\r\n    // console.log(csv);\r\n\r\n    function buildHierarchy(csv) {\r\n      // Helper function that transforms the given CSV into a hierarchical format.\r\n      const root = { name: \"root\", children: [] };\r\n      for (let i = 0; i < csv.length; i++) {\r\n        const sequence = csv[i][0];\r\n        const size = +csv[i][1];\r\n        if (isNaN(size)) {\r\n          // e.g. if this is a header row\r\n          continue;\r\n        }\r\n        const parts = sequence.split(\"-\");\r\n        let currentNode = root;\r\n        for (let j = 0; j < parts.length; j++) {\r\n          const children = currentNode[\"children\"];\r\n          const nodeName = parts[j];\r\n          let childNode = null;\r\n          if (j + 1 < parts.length) {\r\n            // Not yet at the end of the sequence; move down the tree.\r\n            let foundChild = false;\r\n            for (let k = 0; k < children.length; k++) {\r\n              if (children[k][\"name\"] == nodeName) {\r\n                childNode = children[k];\r\n                foundChild = true;\r\n                break;\r\n              }\r\n            }\r\n            // If we don't already have a child node for this branch, create it.\r\n            if (!foundChild) {\r\n              childNode = { name: nodeName, children: [] };\r\n              children.push(childNode);\r\n            }\r\n            currentNode = childNode;\r\n          } else {\r\n            // Reached the end of the sequence; create a leaf node.\r\n            childNode = { name: nodeName, value: size };\r\n            children.push(childNode);\r\n          }\r\n        }\r\n      }\r\n      return root;\r\n    }\r\n\r\n    data = buildHierarchy(csv);\r\n    console.log(data);\r\n\r\n    return { data };\r\n  },\r\n  components: {},\r\n  methods: {\r\n    draw() {\r\n      let color = d3\r\n        .scaleOrdinal()\r\n        .domain([\r\n          \"分からない\",\r\n          \"新しい生活様式に対応した企業活動は定着しない\",\r\n          \"すでに定着している\",\r\n          \"2020年内を見込んでいる\",\r\n          \"2021年前半(1~6月)頃を見込んでいる\",\r\n          \"2021年後半(7~12月)頃を見込んでいる\",\r\n          \"2022年以降を見込む\",\r\n        ])\r\n        .range([\r\n          \"rgb(215, 25, 28)\",\r\n          \"rgb(253, 174, 97)\",\r\n          \"rgb(255, 255, 191)\",\r\n          \"rgb(171, 221, 164)\",\r\n          \"rgb(43, 131, 186)\",\r\n          \"#ad83cb\",\r\n          \"#417941\",\r\n          \"#aaff7f\",\r\n          \"#aaaaff\",\r\n          \"#00aa7f\",\r\n        ]);\r\n\r\n      let width = 180;\r\n\r\n      let radius = width / 2;\r\n\r\n      let arc = d3\r\n        .arc()\r\n        .startAngle((d) => d.x0)\r\n        .endAngle((d) => d.x1)\r\n        .padAngle(1 / radius)\r\n        .padRadius(radius)\r\n        .innerRadius((d) => Math.sqrt(d.y0))\r\n        .outerRadius((d) => Math.sqrt(d.y1) - 1);\r\n\r\n      let mousearc = d3\r\n        .arc()\r\n        .startAngle((d) => d.x0)\r\n        .endAngle((d) => d.x1)\r\n        .innerRadius((d) => Math.sqrt(d.y0))\r\n        .outerRadius(radius);\r\n\r\n      function partition(data) {\r\n        return d3.partition().size([2 * Math.PI, radius * radius])(\r\n          d3\r\n            .hierarchy(data)\r\n            .sum((d) => d.value)\r\n            .sort((a, b) => b.value - a.value)\r\n        );\r\n      }\r\n\r\n      const root = partition(this.data);\r\n      console.log(root);\r\n\r\n      const svg = d3.select(\"#svg4\");\r\n\r\n      const element = svg.node();\r\n      element.value = { sequence: [], percentage: 0.0 };\r\n\r\n      const label = svg\r\n        .append(\"text\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"fill\", \"#888\")\r\n        .style(\"visibility\", \"hidden\");\r\n\r\n      label\r\n        .append(\"tspan\")\r\n        .attr(\"class\", \"percentage\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", 0)\r\n        .attr(\"dy\", \"-0.1em\")\r\n        .attr(\"font-size\", \"3em\")\r\n        .text(\"\");\r\n\r\n      label\r\n        .append(\"tspan\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", 0)\r\n        .attr(\"dy\", \"1.5em\")\r\n        .text(\"of visits begin with this sequence\");\r\n\r\n      svg\r\n        .attr(\"viewBox\", `${-radius} ${-radius} ${width} ${width}`)\r\n        .style(\"max-width\", `${width / 1.5}px`)\r\n        .style(\"font\", \"12px sans-serif\");\r\n\r\n      const map = new Map();\r\n\r\n      const path = svg\r\n        .append(\"g\")\r\n        .selectAll(\"path\")\r\n        .data(\r\n          root.descendants().filter((d) => {\r\n            return d.depth && d.x1 - d.x0 > 0.001;\r\n          })\r\n        )\r\n        .join(\"path\")\r\n        .attr(\"fill\", (d) => color(d.data.name))\r\n        .attr(\"d\", arc);\r\n\r\n      svg\r\n        .append(\"g\")\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"pointer-events\", \"all\")\r\n        .on(\"mouseleave\", () => {\r\n          path.attr(\"fill-opacity\", 1);\r\n          label.style(\"visibility\", \"hidden\");\r\n          // Update the value of this view\r\n          element.value = { sequence: [], percentage: 0.0 };\r\n          element.dispatchEvent(new CustomEvent(\"input\"));\r\n        })\r\n        .selectAll(\"path\")\r\n        .data(\r\n          root.descendants().filter((d) => {\r\n            // Don't draw the root node, and for efficiency, filter out nodes that would be too small to see\r\n            return d.depth && d.x1 - d.x0 > 0.001;\r\n          })\r\n        )\r\n        .join(\"path\")\r\n        .attr(\"d\", mousearc);\r\n    },\r\n  },\r\n  mounted() {\r\n    // this.getF1AJson();\r\n    this.draw();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nchart-info {\r\n  font-size: 14px;\r\n  color: #0000ff;\r\n  font-weight: bold;\r\n  margin-top: 40%;\r\n  margin-left: 1.5%;\r\n}\r\n.rightC {\r\n  margin-right: 70%;\r\n  margin-top: -11%;\r\n}\r\n</style>"],"sourceRoot":""}]}