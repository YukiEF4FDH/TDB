{"remainingRequest":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\src\\components\\Curve.vue?vue&type=style&index=0&id=1cbfdd6f&lang=css","dependencies":[{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\src\\components\\Curve.vue","mtime":1639517084242},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQojc3ZnMUN1cnZlMCB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgLyogYm9yZGVyOiAycHggZGFzaGVkIHB1cnBsZTsgKi8NCiAgd2lkdGg6IDc1MHB4Ow0KICBoZWlnaHQ6IDEyMHB4Ow0KICBsZWZ0OiAzNSU7DQogIHRvcDogNTAuNSU7DQp9DQojc3ZnQ3VydmUzIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICAvKiBib3JkZXI6IDVweCBkYXNoZWQgcHVycGxlOyAqLw0KICB3aWR0aDogODUwcHg7DQogIGhlaWdodDogMzIwcHg7DQogIG1hcmdpbi10b3A6IC0xOCU7DQogIG1hcmdpbi1sZWZ0OiAxMCU7DQp9DQojc3ZnMUN1cnZlNCB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgLyogYm9yZGVyOiA1cHggZGFzaGVkIHB1cnBsZTsgKi8NCiAgd2lkdGg6IDg1MHB4Ow0KICBoZWlnaHQ6IDMyMHB4Ow0KICBtYXJnaW4tdG9wOiAtMTglOw0KICBtYXJnaW4tbGVmdDogMjAlOw0KfQ0KI3N2ZzJDdXJ2ZTEgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIC8qIGJvcmRlcjogNXB4IGRhc2hlZCBwdXJwbGU7ICovDQogIHdpZHRoOiA5MDBweDsNCiAgaGVpZ2h0OiAzMjBweDsNCiAgbWFyZ2luLXRvcDogLTE4JTsNCiAgbWFyZ2luLWxlZnQ6IDMwJTsNCn0NCiNzdmcyQ3VydmUyIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICAvKiBib3JkZXI6IDVweCBkYXNoZWQgcHVycGxlOyAqLw0KICB3aWR0aDogNTEwcHg7DQogIGhlaWdodDogMzIwcHg7DQogIG1hcmdpbi10b3A6IC04LjUlOw0KICBtYXJnaW4tbGVmdDogMTQlOw0KfQ0KI3N2ZzRDdXJ2ZTEgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIC8qIGJvcmRlcjogNXB4IGRhc2hlZCBwdXJwbGU7ICovDQogIHdpZHRoOiAyNzBweDsNCiAgaGVpZ2h0OiAxMjBweDsNCiAgbWFyZ2luLXRvcDogLTE1JTsNCiAgbWFyZ2luLWxlZnQ6IDUlOw0KfQ0K"},{"version":3,"sources":["D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\Demo\\TDBDemo4\\client\\src\\components\\Curve.vue"],"names":[],"mappings":"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","file":"D:/MyResearch/WakitaLab/ProjectTDB/Code/Demo/TDBDemo4/client/src/components/Curve.vue","sourceRoot":"","sourcesContent":["<script>\r\nimport * as d3 from \"d3\";\r\n\r\nexport default {\r\n  name: \"Curve\",\r\n  data() {},\r\n  methods: {\r\n    drawCurve(id) {\r\n      console.log(id);\r\n      if (id == \"#svg1Curve0\") {\r\n        console.log(id);\r\n        let pointStr = \"[[5,130],[200,60],[450,25],[550,84]]\";\r\n        let data = JSON.parse(pointStr);\r\n        var points = [];\r\n        const target_copy = data;\r\n        for (var thing in target_copy) {\r\n          points.push(new Array(target_copy[thing][0], target_copy[thing][1]));\r\n        }\r\n\r\n        const curve = d3.line().curve(d3.curveNatural);\r\n\r\n        d3.select(id)\r\n          .append(\"path\")\r\n          .attr(\"d\", curve(points))\r\n          .transition()\r\n          .duration(500)\r\n          .attr(\"stroke\", \"#aabe9b\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"fill\", \"none\");\r\n      } else if (id == \"#svg2Curve2\") {\r\n        console.log(id);\r\n        let pointStr = \"[[5,130],[200,95],[420,92],[510,139]]\";\r\n        let data = JSON.parse(pointStr);\r\n        let points = [];\r\n        const target_copy = data;\r\n        for (let thing in target_copy) {\r\n          points.push(new Array(target_copy[thing][0], target_copy[thing][1]));\r\n        }\r\n\r\n        const curve = d3.line().curve(d3.curveNatural);\r\n\r\n        d3.select(id)\r\n          .append(\"path\")\r\n          .attr(\"d\", curve(points))\r\n          .transition()\r\n          .duration(500)\r\n          .attr(\"stroke\", \"#aabe9b\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"fill\", \"none\");\r\n      } else if (id == \"#svg4Curve1\") {\r\n        console.log(id);\r\n        let pointStr = \"[[60,60],[150,35],[220,30],[250,50]]\";\r\n        let data = JSON.parse(pointStr);\r\n        let points = [];\r\n        const target_copy = data;\r\n        for (let thing in target_copy) {\r\n          points.push(new Array(target_copy[thing][0], target_copy[thing][1]));\r\n        }\r\n\r\n        const curve = d3.line().curve(d3.curveNatural);\r\n\r\n        d3.select(id)\r\n          .append(\"path\")\r\n          .attr(\"d\", curve(points))\r\n          .transition()\r\n          .duration(500)\r\n          .attr(\"stroke\", \"#aabe9b\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"fill\", \"none\");\r\n      }\r\n    },\r\n    drawCurve2(id) {\r\n      if (id == \"svgCurve3\") {\r\n        let pointStr = \"[[0,110],[150,40],[500,50],[700,55]]\";\r\n        let data = JSON.parse(pointStr);\r\n        let points = [];\r\n        const target_copy = data;\r\n        for (let thing in target_copy) {\r\n          points.push(new Array(target_copy[thing][0], target_copy[thing][1]));\r\n        }\r\n\r\n        const curve = d3.line().curve(d3.curveNatural);\r\n\r\n        d3.select(\"#svgCurve3\")\r\n          .append(\"path\")\r\n          .attr(\"d\", curve(points))\r\n          .transition()\r\n          .duration(500)\r\n          .attr(\"stroke\", \"#d39d9c\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"fill\", \"none\");\r\n      } else if (id == \"svg1Curve4\") {\r\n        let pointStr = \"[[150,120],[250,170],[400,160],[650,130]]\";\r\n        let data = JSON.parse(pointStr);\r\n        let points = [];\r\n        const target_copy = data;\r\n        for (let thing in target_copy) {\r\n          points.push(new Array(target_copy[thing][0], target_copy[thing][1]));\r\n        }\r\n\r\n        const curve = d3.line().curve(d3.curveNatural);\r\n\r\n        d3.select(\"#svg1Curve4\")\r\n          .append(\"path\")\r\n          .attr(\"d\", curve(points))\r\n          .transition()\r\n          .duration(500)\r\n          .attr(\"stroke\", \"#d39d9c\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"fill\", \"none\");\r\n      } else if (id == \"svg2Curve1\") {\r\n        let pointStr = \"[[0,180],[150,80],[400,120],[500,133]]\";\r\n        let data = JSON.parse(pointStr);\r\n        let points = [];\r\n        const target_copy = data;\r\n        for (let thing in target_copy) {\r\n          points.push(new Array(target_copy[thing][0], target_copy[thing][1]));\r\n        }\r\n\r\n        const curve = d3.line().curve(d3.curveNatural);\r\n\r\n        d3.select(\"#svg2Curve1\")\r\n          .append(\"path\")\r\n          .attr(\"d\", curve(points))\r\n          .transition()\r\n          .duration(500)\r\n          .attr(\"stroke\", \"#d39d9c\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"fill\", \"none\");\r\n\r\n        d3.select(\"#svg2Curve1\")\r\n          .append(\"line\")\r\n          .attr(\"x1\", 130)\r\n          .attr(\"y1\", 133)\r\n          .attr(\"x2\", 880)\r\n          .attr(\"y2\", 133)\r\n          .attr(\"stroke\", \"black\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"fill\", \"none\")\r\n          .attr(\"stroke-dasharray\", 5);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.draw();\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#svg1Curve0 {\r\n  position: absolute;\r\n  /* border: 2px dashed purple; */\r\n  width: 750px;\r\n  height: 120px;\r\n  left: 35%;\r\n  top: 50.5%;\r\n}\r\n#svgCurve3 {\r\n  position: absolute;\r\n  /* border: 5px dashed purple; */\r\n  width: 850px;\r\n  height: 320px;\r\n  margin-top: -18%;\r\n  margin-left: 10%;\r\n}\r\n#svg1Curve4 {\r\n  position: absolute;\r\n  /* border: 5px dashed purple; */\r\n  width: 850px;\r\n  height: 320px;\r\n  margin-top: -18%;\r\n  margin-left: 20%;\r\n}\r\n#svg2Curve1 {\r\n  position: absolute;\r\n  /* border: 5px dashed purple; */\r\n  width: 900px;\r\n  height: 320px;\r\n  margin-top: -18%;\r\n  margin-left: 30%;\r\n}\r\n#svg2Curve2 {\r\n  position: absolute;\r\n  /* border: 5px dashed purple; */\r\n  width: 510px;\r\n  height: 320px;\r\n  margin-top: -8.5%;\r\n  margin-left: 14%;\r\n}\r\n#svg4Curve1 {\r\n  position: absolute;\r\n  /* border: 5px dashed purple; */\r\n  width: 270px;\r\n  height: 120px;\r\n  margin-top: -15%;\r\n  margin-left: 5%;\r\n}\r\n</style>"]}]}