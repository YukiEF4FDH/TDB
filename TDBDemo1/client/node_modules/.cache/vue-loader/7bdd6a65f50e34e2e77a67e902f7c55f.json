{"remainingRequest":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\TestCurve1.vue?vue&type=template&id=19e2e884","dependencies":[{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\TestCurve1.vue","mtime":1636367585910},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1632349277000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgPHN2ZyBpZD0ic3ZnQ3VydmUxIj48L3N2Zz4NCg=="},{"version":3,"sources":["D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.8\\2021-11-08_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\TestCurve1.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"D:/MyResearch/WakitaLab/ProjectTDB/Code/11.8/2021-11-08_CHEN_TDBDemo-Flask-Vue/client/src/components/TestCurve1.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <svg id=\"svgCurve1\"></svg>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport default {\r\n  name: \"TestCurve1\",\r\n  data() {\r\n\r\n  let pointStr = \"[[0,0],[23,405],[120,35],[10,10]]\";\r\n    let data = JSON.parse(pointStr);\r\n\r\n    return { data };\r\n  },\r\n  components: {},\r\n  methods: {\r\n    draw() {\r\n      var points = [];\r\n      const target_copy = Object.assign({}, this.data);\r\n      for (var thing in target_copy)\r\n      {\r\n        console.log(target_copy[thing][0]+\",\"+target_copy[thing][1]);\r\n        points.push(new Array(target_copy[thing][0],target_copy[thing][1]));\r\n      }\r\n      console.log(points);\r\n\r\n      const curve = d3.line().curve(d3.curveNatural);\r\n\r\n    //   d3.select(\"#divCurve1\").append(\"svg\").attr(\"id\", \"svgCurve\");\r\n      // d3.select(\"#svgCurve\").append(\"svg\").attr(\"id\", \"svgCurve1\");\r\n\r\n    //   var svg = d3.select(\"#svgCurve\").append(\"svg\").attr(\"id\",\"svgCurve1\");\r\n\r\n      d3.select(\"#svgCurve1\")\r\n        .append(\"path\")\r\n        .attr(\"d\", curve(points))\r\n        .attr(\"stroke\", \"red\")\r\n        .attr(\"fill\", \"none\");\r\n    },\r\n  },\r\n  mounted() {\r\n    this.draw();\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>"]}]}