{"remainingRequest":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\Sec1\\Sec1Chart0.vue?vue&type=template&id=7267ff41&scoped=true","dependencies":[{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\Sec1\\Sec1Chart0.vue","mtime":1637026400152},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1632349277000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1632349277000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgaWQ9IlNlYzEtQ2hhcnQwIiBjbGFzcz0icmlnaHRDIj4NCiAgICA8c3ZnIGlkPSJzdmcxIj48L3N2Zz4NCiAgICA8Y2hhcnQtaW5mbz7mlrDlnovjgrPjg63jg4rjgqbjgqTjg6vjgrnmhJ/mn5Pnl4fjgavjgojjgovmpa3nuL7jgbjjga7lvbHpn788L2NoYXJ0LWluZm8+DQogIDwvZGl2Pg0KICA8IS0tIAk8U2VjMlRleHQ+d2hhdDwvU2VjMlRleHQ+DQoJPFNlYzFUZXh0PjwvU2VjMVRleHQ+IC0tPg0KICA8IS0tIDxzdmcgaWQ9InN2Z0N1cnZlMiI+PC9zdmc+IC0tPg0K"},{"version":3,"sources":["D:\\MyResearch\\WakitaLab\\ProjectTDB\\Code\\11.10\\2021-11-16_CHEN_TDBDemo-Flask-Vue\\client\\src\\components\\Sec1\\Sec1Chart0.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpvB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC","file":"D:/MyResearch/WakitaLab/ProjectTDB/Code/11.10/2021-11-16_CHEN_TDBDemo-Flask-Vue/client/src/components/Sec1/Sec1Chart0.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div id=\"Sec1-Chart0\" class=\"rightC\">\r\n    <svg id=\"svg1\"></svg>\r\n    <chart-info>新型コロナウイルス感染症による業績への影響</chart-info>\r\n  </div>\r\n  <!-- \t<Sec2Text>what</Sec2Text>\r\n\t<Sec1Text></Sec1Text> -->\r\n  <!-- <svg id=\"svgCurve2\"></svg> -->\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport * as d3 from \"d3\";\r\nimport StackedBar from \"@/components/Visualization/StackedNormalizedHorizontalBar.vue\"\r\n\r\nvar f1aData = \"default\";\r\n\r\nexport default {\r\n  name: \"Sec1Chart0\",\r\n  data() {\r\n    var data = null;\r\n    return {\r\n      data,\r\n    };\r\n  },\r\n  components: {},\r\n  methods: {\r\n    draw() {\r\n      // let series = d3\r\n      //   .stack()\r\n      //   .keys(this.data.columns.slice(1))\r\n      //   .offset(d3.stackOffsetExpand)(this.data)\r\n      //   .map((d) => (d.forEach((v) => (v.key = d.key)), d));\r\n\r\n      // let color = d3\r\n      //   .scaleOrdinal()\r\n      //   .domain(series.map((d) => d.key))\r\n      //   .range(d3.schemeSpectral[series.length])\r\n      //   .unknown(\"#ccc\");\r\n\r\n      // let margin = {\r\n      //   top: 0,\r\n      //   right: 0,\r\n      //   bottom: 0,\r\n      //   left: 0,\r\n      // };\r\n\r\n      // let width = 1330;\r\n      // let height = this.data.length * 33 + margin.top + margin.bottom;\r\n      // // console.log(height);\r\n\r\n      // let svg = d3\r\n      //   .select(\"#svg1\")\r\n      //   .attr(\"viewBox\", [0, 0, width, height])\r\n      //   .style(\"overflow\", \"visible\");\r\n\r\n      // let y = d3\r\n      //   .scaleBand()\r\n      //   .domain(this.data.map((d) => d.month))\r\n      //   .range([margin.top, height - margin.bottom])\r\n      //   .padding(0.08);\r\n\r\n      // let x = d3.scaleLinear().range([margin.left, width - margin.right]);\r\n\r\n      // let formatValue = (x) => (isNaN(x) ? \"N/A\" : x.toLocaleString(\"en\"));\r\n\r\n      // let formatPercent = d3.format(\".1%\");\r\n\r\n      // let arr_j = new Array();\r\n      // let j = 0;\r\n      // let postfix = \"\";\r\n      // let length_y = series[0].length;\r\n\r\n      // svg\r\n      //   .append(\"g\")\r\n      //   .selectAll(\"g\")\r\n      //   .data(series)\r\n      //   .enter()\r\n      //   .append(\"g\")\r\n      //   .attr(\"fill\", function (d, i) {\r\n      //     if (i + 1 == 1) arr_j[j++] = i + 1 + \"a\";\r\n      //     // ???\r\n      //     else if (i + 1 == 2) arr_j[j++] = i + \"b\";\r\n      //     else arr_j[j++] = i;\r\n      //     // console.log(i);\r\n      //     return color(d.key);\r\n      //   })\r\n      //   .selectAll(\"rect\")\r\n      //   .data(function (d) {\r\n      //     j = 0;\r\n      //     return d;\r\n      //   })\r\n      //   .join(\"rect\")\r\n      //   .attr(\"id\", function (d, i) {\r\n      //     let id = \"\";\r\n      //     if (j % length_y == 0) {\r\n      //       postfix = arr_j[j / length_y];\r\n      //       id = \"F1A_\" + (i + 1) + \"_\" + postfix;\r\n      //     } else {\r\n      //       id = \"F1A_\" + (i + 1) + \"_\" + postfix;\r\n      //     }\r\n      //     // console.log(\"F1A_\" + (i + 1) + \"_\" + arr_j[(j) / length_y]);\r\n      //     j++;\r\n      //     return id;\r\n      //   })\r\n      //   .attr(\"class\", (d) => `${d.data.month}${d.key}`)\r\n      //   .attr(\"x\", (d) => x(d[0]))\r\n      //   .attr(\"y\", (d) => y(d.data.month))\r\n      //   .attr(\"width\", (d) => x(d[1]) - x(d[0]))\r\n      //   .attr(\"height\", y.bandwidth());\r\n\r\n      // var font;\r\n\r\n      // svg\r\n      //   .selectAll(\"rect\")\r\n      //   .on(\"mouseover\", function () {\r\n      //     // console.log(this);\r\n      //     // console.log(d3.select(this)._groups[0]);\r\n      //     d3.select(this)\r\n      //       .attr(\"fill\", \"yellow\")\r\n      //       .append(\"title\")\r\n      //       .text(\r\n      //         (d) => `${d.data.month} ${d.key}\r\n\t\t\t// \t\t\t\t\t\t\t\t${formatPercent(d[1] - d[0])} (${formatValue(d.data[d.key])})`\r\n      //       );\r\n\r\n      //     font = document.getElementById(\"test0\").style.font;\r\n      //     document.getElementById(\"test0\").style.font =\r\n      //       \"italic 20px arial,serif\";\r\n      //   })\r\n      //   .on(\"mouseout\", function () {\r\n      //     d3.select(this)\r\n      //       .transition()\r\n      //       .duration(500)\r\n      //       .attr(\"fill\", (d) => color(d.key));\r\n\r\n      //     document.getElementById(\"test0\").style.font = font;\r\n      //   });\r\n\r\n      // let yAxis = (g) =>\r\n      //   g\r\n      //     .attr(\"transform\", `translate(${margin.left},0)`)\r\n      //     .call(d3.axisLeft(y).tickSizeOuter(0))\r\n      //     .call((g) => g.selectAll(\".domain\").remove());\r\n\r\n      // let xAxis = (g) =>\r\n      //   g\r\n      //     .attr(\"transform\", `translate(0,${margin.top})`)\r\n      //     .call(d3.axisTop(x).ticks(width / 100, \"%\"))\r\n      //     .call((g) => g.selectAll(\".domain\").remove());\r\n\r\n      // svg.append(\"g\").call(xAxis);\r\n\r\n      // svg.append(\"g\").call(yAxis);\r\n      StackedBar.methods.draw(this.data);\r\n    },\r\n    drawCurvedLine() {\r\n      // const points = [[0, 0], [10, 10], [20, 50], [300, 150]];\r\n      // const curve = d3.line().curve(d3.curveNatural);\r\n      // d3.select().select(\"#svg1\").append('path')\r\n      // .attr('d', curve(points))\r\n      // .attr('stroke', 'black')\r\n      // // with multiple points defined, if you leave out fill:none,\r\n      // // the overlapping space defined by the points is filled with\r\n      // // the default value of 'black'\r\n      // .attr('fill', 'none');\r\n    },\r\n    getF1AJson() {\r\n      const path = \"http://127.0.0.1:5000/f1a-json\";\r\n      axios\r\n        .get(path)\r\n        .then((res) => {\r\n          f1aData = res.data;\r\n          if (f1aData != \"default\") {\r\n            f1aData = JSON.parse(f1aData);\r\n            var columns = Object.keys(f1aData[0]);\r\n            columns = columns.slice(0, columns.length - 1);\r\n            // // console.log(columns);\r\n            f1aData.columns = columns;\r\n            // console.log(\"f1aData\");\r\n            // console.log(f1aData);\r\n\r\n            // f1aData = f1aData.sort((a, b) => b[1] / b.total - a[1] / a.total);\r\n            f1aData = f1aData.sort((a, b) => b[1] / b.total - a[1] / a.total);\r\n            this.data = f1aData;\r\n            this.draw();\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getF1AJson();\r\n    // this.drawCurvedLine();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nchart-info {\r\n  font-size: 14px;\r\n  color: #0000ff;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  margin-left: 30%;\r\n}\r\n.rightC {\r\n  margin-left: 42%;\r\n  margin-top: -17%;\r\n}\r\n#svgCurve2 {\r\n  position: absolute;\r\n  border: 2px dashed purple;\r\n  width: 300px;\r\n  height: 120px;\r\n  left: 11%;\r\n}\r\n</style>"]}]}